# Repetation

rep(45,7)
rep("mango",5)

# Random samples
 sample(1:50,3)
sample(1:1000,4) 
sample(1:10,2000,replace=TRUE)
sample(c("hp","dell","lenove"),7,replace=T)
sample


# Indexing/accesing vector element

x=c(2,5,8,20,10,30,58)

x[6]
x[8]
x[4]
x[3]

x[c(4,5)]  # when we want to provide 2 or more index value then create vector of index


x[-1]     #it exclude the value that present on that particular index

x[-4]     # it exclude the value that present on that particular index

x[1]=3     # it change that index with particular value

x[-1]=5    # it simply exclude that index and other will change the value


x[4]=444
x

x[1,3]        # it gives an error

# but when we access the element by creating the vector of index it should provide the elements
x=c(1,3)
x


y=c(1,9,9,9)
y
y<9         # it gives the answer in comparision operator

y[y<9]=7    # it simply put 7 in the place where the y<9 condition true
y

y[y<7]=10
y

# Relational operator with vector

marks=c(60,70,80,50,90)
marks>50

marks[marks>50]
marks
marks==80

names=c("abhi","namya","gana","guru")
p1=c('a','b')

"abhi" %in% names
'a' %in% names

"namya" %in% names   # it give the logical answer for finding the character

# Slicing

marks
marks[3:7]       # it give the element of index 3 and 7
marks[4]
marks[4]=1000    # it simply replace the element of particular index
marks

marks[-3]     # it simply exclude the element of index 3

price=c(2999,449,29,650,2800,192,9384,373,474,4745)
price[2:7] # it give the element for index 2 and 7 by slicing method

price[price>1000]
sort(price)  # it sort in ascending order by default
sort(price,descending=T) # it gives error

help(sort)

sort(price,decreasing=T)   # it simply display the prices in descending order

length(price)
length(marks)
help(paste)
paste(1:12)   # this function display values from 1 to 12

nth=paste(1:12,c("st","nd","rd",rep("th",9))) # it print 1 to 12 with st,nd,rd,th.

nth

month.name
month.abb          
A=paste(month.abb,c("st","nd","rd",rep("th",9)))
A
A=paste(month.abb,"is the" , nth,"month of the year")
A



# basic function on vector

price
length(price)
max(price)
min(price)
sum(price) # it give the addition of all 10 prices

mean(price) # average of price

help(mode)
mode(price)


# Data frames

# slicing the data frames
A=c(42,18,91,87,66)
B=c("p","Q","r","s","t")
data.frame(A,B)      # it simply create dataframe for particular data in vector form

df=data.frame(A,B)
df

# create data frame for trainining,pulse,duration.
df1=data.frame(
  Training=c("Strength","Stamina","Other"),
  Pulse=c(100,150,120),
  Duration=c(60,30,45)
)
df1

df1[1]
df1[2]
df1[3]
df1$Training

# create data frame for height and weight
df2=data.frame(
  height=c(150,160),
  weight=c(65,72))
df2


# create data frame for food

food=data.frame(name=c("pav bhaji","kaju katli","paneer masala","mashroom","chatinad"),
                type=c("veg","veg","veg","veg","veg"),
                Taste=c("spicy","spicy","spicy","spicy","sweet"),
                price=c(120,250,270,260,240))
food
 # Rows with food type veg

food[food$type=="veg",]  # this display foodtype veg for particular column

food[food$price>200,] 
food[food$Taste=="sweet",]  # it gives food that are sweet with there price

food[food$type=="nonveg",c("name","price")] # it give name and price of food with type

food[food$Taste=="spicy"& food$price<250,]
food[food$Taste=="spicy" | food$price<250,]



# Orange , mtcars are built in dataset. Learn with this dataset
Orange
mtcars
dim(mtcars)   # this gives count of dimension or row ,coloumns of mtcars dataset
nrow(mtcars)  # this gives count of all rows of mtcars dataset
ncol(mtcars)  # this gives count of all coloumn  of mtcars dataset
str(mtcars)  # this gives structure of mtcars dataset.

summary(mtcars) # this comand gives the summary for all couloumn seperately.

help(mtcars)
mtcars$cyl     # it display the data of single columon
table(mtcars$cyl)
mtcars$gear
table(mtcars$gear)

# USArrests built in data set

USArrests

help("USArrests")
View(USArrests)
head(USArrests)
tail(USArrests)
head(USArrests,7)
tail(USArrests,10)


#Check all available dataset
data()

